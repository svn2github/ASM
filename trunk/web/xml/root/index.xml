<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>

<!DOCTYPE document SYSTEM '../../common/dtd/objectweb.dtd'>

<document>
  <properties>
    <author email="asm-team@objectweb.org">asm-team</author>
    <title>Home Page</title>
    <filename>index.xml</filename>
    <pathtoroot>.</pathtoroot>
  </properties>

  <body>
    <s1 name="ASM">

    <table border="0">
    <tr>
    <td>
    
    <p>
    <img src="images/asm.png" border="0" width="288" height="180" alt="ASM logo"/>
    </p>
    
    <p><strong>ASM</strong> is a Java bytecode manipulation framework. It can be used
    to dynamically generate stub classes or other proxy classes, directly in binary
    form, or to dynamically modify classes at load time, i.e., just before they are
    loaded into the Java Virtual Machine.</p>

    <p>ASM offers similar functionalities as <a href="http://jakarta.apache.org/bcel/">BCEL</a>
    or <a href="http://serp.sourceforge.net/">SERP</a>, but is much more smaller (25KB
    instead of 350KB for BCEL and 150KB for SERP)
    and faster than these tools (the overhead of a load time class transformation
    is of the order of 60% with ASM, 700% or more with BCEL, and 1100% or more with SERP).
    Indeed ASM was designed to be used in a dynamic way* and
    was therefore designed and implemented to be as small and as fast as possible.</p>
    
    <p>(*) ASM can of course be used in a static way too.</p>
    
    </td>
    <td>

    <p><strong>Overview</strong></p><hr/>
        
    <p><a href="current/asm-eng.pdf">"ASM: a code manipulation tool to implement adaptable systems"</a>,
    E. Bruneton, R. Lenglet and T. Coupaye,
    <a href="http://arcad.essi.fr/2002-10-composants.html">Adaptable and
    extensible component systems</a>, november 2002, Grenoble, France. Also
    available in <a href="current/asm-fr.pdf">french</a>.</p>
            
    <p><strong>Tutorials</strong></p><hr/>

    <p><strong>The best way to learn to use ASM is to write a Java source file 
    that is equivalent to what you want to generate and then use the ASMifier mode of the 
    <a href="eclipse/index.html">Bytecode Outline</a> plugin for Eclipse (or the 
    <a href="doc/faq.html#Q10">ASMifier</a> tool) to see the equivalent ASM code. If you want
    to implement a class transformer, write two Java source files (before and after 
    transformation) and use the compare view of the plugin in ASMifier mode to compare the
    equivalent ASM code.</strong> The following tutorial gives more 
    details about this process:</p>
    
    <p><a href="doc/tutorial.html">Tutorial for ASM 1.5.x</a>.</p>
    
    <p><a href="doc/tutorial-annotations.html">Tutorial for using J2SE 5.0 Annotations with ASM 1.5.x</a>.</p>
    
    <p><strong>FAQ</strong></p><hr/>
    
    <p><a href="doc/faq.html">Frequently Asked Questions</a>.</p>
    
    <p><strong>API</strong></p><hr/>
    
    <p><a href="current/doc/javadoc/user/index.html">ASM API</a>
    (<a href="current/doc/javadoc/user/overview-summary.html">no
    frames</a>).</p>
                
    </td>
    </tr>
    </table>
          
    </s1>

    <s1 name="Recent News">

      <subtitle>7 February 2005: release of the ASM 2.0.RC1 version</subtitle>

    </s1>

  </body>
</document>
