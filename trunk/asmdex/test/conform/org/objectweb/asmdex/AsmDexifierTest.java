/* Software Name : AsmDex
 * Version : 1.0
 *
 * Copyright © 2012 France Télécom
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holders nor the names of its
 *    contributors may be used to endorse or promote products derived from
 *    this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.objectweb.asmdex;

import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collection;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;
import org.ow2.asmdex.ApplicationReader;
import org.ow2.asmdex.Opcodes;
import org.ow2.asmdex.util.AsmDexifierApplicationVisitor;

/**
 * Tests the AsmDexifier.
 * 
 * Takes every dex file available, gets the code output (, executes it and compare
 * the output of baksmali with the output of baksmali of the first one.
 * <br/>
 * <ul>
 * <li> Executes AsmDexifierApplicationVisitor with the dex file to disassemble, adds a main method
 *   that will run the dump method and saves its content into a temporary folder.</li>
 * <li> Compiles the file and executes it. A dex file is created.</li>
 * <li> Uses baksmali to compare the generated and the original file.</li>
 * </ul>
 * 
 * NOTE : Uses Javac and Java to compile and execute the generated classes. Beware of your PATH.
 * 
 * @author Julien Névo
 */
@RunWith(Parameterized.class)
public class AsmDexifierTest {
	
    @Parameters
    public static Collection<Object[]> data() {
        ArrayList<Object[]> data = new ArrayList<Object[]>();
        File testCaseFolder;
        testCaseFolder = new File(TestUtil.PATH_FOLDER_TESTCASE + TestUtil.FULL_TEST_SUBFOLDER);
        for (File dexFile : testCaseFolder.listFiles()) {
            String dexFileName = dexFile.getName();
            if (dexFileName.toLowerCase().endsWith(".dex")) {
                data.add(new Object [] {dexFile});
            }
        }
        return data;
    }

    private File dexFile;

    public AsmDexifierTest(File file) {
        dexFile = file;
    }

	/**
	 * True to show little messages about what files is being tested.
	 */
	private static boolean SHOW_MESSAGES = true;


	/**
	 * Tests if the generation to byte array is correct.
	 * For each dex file contained in the test/case folder :
	 *   - Runs Baksmali to create all the .smali file in the baksmali temporary folder.
	 *   - Runs Baksmali to create the files generated by the writer, in a second temporary folder.
	 *   - Compares the Maps information of both dex files. They should have the same
	 *     number of elements.
	 *   - Compares each .smali files :
	 *     Allows some dex files to skip some debug information : the line numbers can be
	 *     incorrect in some rare and not useful cases.
	 * @throws IOException 
	 */
	@Test
	public void testAsmDexifier() throws Exception {
	    testDexFile(false);
	}

	/**
	 * Same test as testAsmDexifier without debug info
	 * @throws Exception
	 */
	@Test
    public void testAsmDexifierSkip() throws Exception {
        testDexFile(true);
    }
	
	/**
	 * Tests the given dex file.
	 * @param dexFile the dex file to test.
	 * @param skipLineNumbers true to skip line numbers when comparing the files. It might be useful
	 *        for some dex files that have wrong generated line numbers, which happens in rare case.
	 * @return true if the generated dex file matches the original.
	 * @throws Exception 
	 */
	private boolean testDexFile(boolean skipLineNumbers) throws Exception {
		
		TestUtil.removeTemporaryFolder();
		TestUtil.createTemporaryFolders(new String[] { TestUtil.PATH_FOLDER_TEST, TestUtil.PATH_FOLDER_CONFORM });
		
		// Executes AsmDexifierApplicationVisitor with the dex file to disassemble, adds a main method
		// that will run the dump method and saves its content into a temporary folder.
		OutputStream out = new FileOutputStream(
				TestUtil.TEMP_FOLDER_ROOT + TestUtil.PATH_FOLDER_TEST +
				TestUtil.PATH_FOLDER_CONFORM + TestUtil.FILENAME_TESTDUMP);

		String packageStr = TestUtil.PATH_FOLDER_TEST + TestUtil.PATH_FOLDER_CONFORM;
		// The package name is built from the path by replacing '/' by '.' and removing the last '/'.
		packageStr = packageStr.replace('/', '.');
		packageStr = packageStr.substring(0, packageStr.length() - 1);
		AsmDexifierApplicationVisitor ad = new AsmDexifierApplicationVisitor(
				Opcodes.ASM4, new PrintWriter(out), packageStr, TestUtil.TEMP_FOLDER_ROOT);
		AsmDexifierApplicationVisitor.setDexFileName("Test");
		ApplicationReader ar = new ApplicationReader(Opcodes.ASM4, dexFile);
        ar.accept(ad, null, 0);
        
        // Compiles the file and executes it through the main method. A dex file is created.
        if (SHOW_MESSAGES) {
        	System.out.print("Compiling... ");
        }
		
   		Process p = Runtime.getRuntime().exec(
   				"javac " +
   				"-sourcepath src " +
   				"-d " + TestUtil.TEMP_FOLDER_ROOT + " " +
   				// Path to the file to compile.
   				TestUtil.TEMP_FOLDER_ROOT + TestUtil.PATH_FOLDER_TEST +
				TestUtil.PATH_FOLDER_CONFORM + TestUtil.FILENAME_TESTDUMP
   		);
   		try { p.waitFor();
		} catch (InterruptedException e) { e.printStackTrace(); }
   		
		int result = p.exitValue();
		if (result != 0) {
			System.err.println("Exit value = " + p.exitValue());
			System.err.println(TestUtil.getStringFromStream(p.getErrorStream()));
			return false;
		}
		
        
		// Running Java to run our compiled class.
		if (SHOW_MESSAGES) {
			System.out.print("Running... ");
		}
		
		p = Runtime.getRuntime().exec(
				"java " +
				"-classpath " + TestUtil.TEMP_FOLDER_ROOT + " " +
				// Path to the generated file to compile.
				TestUtil.PATH_FOLDER_TEST +
				TestUtil.PATH_FOLDER_CONFORM + TestUtil.FILENAME_TESTDUMP_NO_EXTENSION + " " +
				// Parameter : the dex file to "AsmDexify".
				TestUtil.TEMP_FOLDER_ROOT + TestUtil.FILENAME_GENERATED_DEX
		);
		try { p.waitFor();
		} catch (InterruptedException e) { e.printStackTrace(); }

		result = p.exitValue();
		if (result != 0) {
			System.err.println("Exit value = " + result);
			System.err.println(TestUtil.getStringFromStream(p.getErrorStream()));
			return false;
		}
		
		
		File createdDexFile = new File(TestUtil.TEMP_FOLDER_ROOT + TestUtil.FILENAME_GENERATED_DEX); 
			
		// Uses baksmali to compare the generated and the original file.
		// Tests the maps of both the original dex file and the generated one.
		assertTrue("Unequal Map between the original and the generated file.", TestUtil.testMapDexFiles(createdDexFile, dexFile));
		
		// Executes Baksmali to disassemble the current dex file.
		TestUtil.baksmali(new String[] { dexFile.getAbsolutePath(),
				"-o" + TestUtil.TEMP_FOLDER_EXPECTED});
		
		// Executes Baksmali once again to disassemble our generated dex file.
		TestUtil.baksmali(new String[] { TestUtil.TEMP_FOLDER_ROOT + TestUtil.FILENAME_GENERATED_DEX,
				"-o" + TestUtil.TEMP_FOLDER_GENERATED});
		
		// Compare the folders and the .smali files inside.
		boolean areFolderIdentical = TestUtil.testSmaliFoldersEquality(TestUtil.TEMP_FOLDER_GENERATED,
				TestUtil.TEMP_FOLDER_EXPECTED, skipLineNumbers);
		
		TestUtil.removeTemporaryFolder();
		
		assertTrue("Unequal smali folders between the original and the generated file.", areFolderIdentical);
		
		if ((areFolderIdentical) && (SHOW_MESSAGES)) {
			System.out.println("OK!");
		}
		return areFolderIdentical;
	}
	
}
