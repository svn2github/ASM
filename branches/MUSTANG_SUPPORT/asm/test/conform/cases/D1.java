package cases;

import java.io.FileOutputStream;

import org.objectweb.asm.*;

/* covers what cannot be generated by javac 1.6: */
/* V1_1 version, unknown attributes, NOP, SWAP, JSR, RET, ... */
/* dead code */

public class D1 implements Opcodes {

    public static void main(final String[] args) throws Exception {
        FileOutputStream fos = new FileOutputStream(args[0]);
        fos.write(dump());
        fos.close();
    }

    public static byte[] dump() throws Exception {

        ClassWriter cw = new ClassWriter(0);
        FieldVisitor fv;
        MethodVisitor mv;

        cw.visit(V1_1,
                ACC_PUBLIC + ACC_SUPER,
                "cases/D1",
                null,
                "java/lang/Object",
                null);

        cw.visitSource("D1.java", null);
        cw.visitAttribute(new Comment());

        {
            fv = cw.visitField(ACC_PUBLIC, "i", "I", null, null);
            fv.visitAttribute(new Comment());
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
            mv.visitAttribute(new Comment());
            mv.visitCode();
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL,
                    "java/lang/Object",
                    "<init>",
                    "()V");
            mv.visitInsn(RETURN);
            mv.visitAttribute(new CodeComment());
            mv.visitMaxs(1, 1);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "m", "([I)V", null, null);
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, null);
            Label l3 = new Label();
            mv.visitTryCatchBlock(l2, l3, l2, null);
            mv.visitLabel(l0);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "cases/D1", "m", "([I)V");
            Label l4 = new Label();
            mv.visitJumpInsn(JSR, l4);
            mv.visitLabel(l1);
            Label l5 = new Label();
            mv.visitJumpInsn(GOTO, l5);
            mv.visitLabel(l2);
            mv.visitVarInsn(ASTORE, 2);
            mv.visitJumpInsn(JSR, l4);
            mv.visitLabel(l3);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l4);
            mv.visitVarInsn(ASTORE, 3);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 4);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitInsn(ICONST_1);
            mv.visitInsn(ISUB);
            Label l7 = new Label();
            mv.visitJumpInsn(IF_ICMPGE, l7);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitInsn(ICONST_1);
            mv.visitInsn(IADD);
            mv.visitVarInsn(ISTORE, 5);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(ARRAYLENGTH);
            Label l9 = new Label();
            mv.visitJumpInsn(IF_ICMPGE, l9);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitInsn(IALOAD);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitInsn(IALOAD);
            Label l10 = new Label();
            mv.visitJumpInsn(IF_ICMPGE, l10);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitInsn(IALOAD);
            mv.visitVarInsn(ISTORE, 6);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ILOAD, 4);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitInsn(IALOAD);
            mv.visitInsn(IASTORE);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitVarInsn(ILOAD, 5);
            mv.visitVarInsn(ILOAD, 6);
            mv.visitInsn(IASTORE);
            mv.visitLabel(l10);
            mv.visitIincInsn(5, 1);
            mv.visitJumpInsn(GOTO, l8);
            mv.visitLabel(l9);
            mv.visitIincInsn(4, 1);
            mv.visitJumpInsn(GOTO, l6);
            mv.visitLabel(l7);
            mv.visitVarInsn(RET, 3);
            mv.visitLabel(l5);
            mv.visitInsn(RETURN);
            mv.visitMaxs(4, 7);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "m", "(II)V", null, null);            
            mv.visitInsn(NOP); // NOP
            Label l0 = new Label();
            mv.visitJumpInsn(GOTO, l0);            
            mv.visitVarInsn(ILOAD, 1); // dead code
            mv.visitVarInsn(ILOAD, 2); // dead code
            mv.visitInsn(IADD); // dead code
            mv.visitInsn(POP); // dead code
            mv.visitLabel(l0);
            mv.visitVarInsn(ILOAD, 1);
            mv.visitVarInsn(ILOAD, 2);
            mv.visitInsn(SWAP); // SWAP
            mv.visitInsn(IADD);
            mv.visitInsn(POP);
            mv.visitInsn(RETURN);
            mv.visitMaxs(2, 3);
            mv.visitEnd();
        }
        cw.visitEnd();

        return cw.toByteArray();
    }

    static class Comment extends Attribute {

        protected Comment() {
            super("Comment");
        }

        protected Attribute read(
            ClassReader cr,
            int off,
            int len,
            char[] buf,
            int codeOff,
            Label[] labels)
        {
            return new Comment();
        }

        protected ByteVector write(
            ClassWriter cw,
            byte[] code,
            int len,
            int maxStack,
            int maxLocals)
        {
            return new ByteVector();
        }
    }

    static class CodeComment extends Comment {

        public boolean isCodeAttribute() {
            return true;
        }
    }
}
